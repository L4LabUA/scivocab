#!/usr/bin/env python

"""The create_db script creates an SQLite3 database that contains the tables
and data required for the app."""

import os
import sys
from app.models import (
    Word,
    Strand,
    BreadthTaskImage,
    BreadthTaskImageType,
    DepthTaskImage,
    DepthTaskImageType,
)
from flask_sqlalchemy import SQLAlchemy
from app import create_app, db
from sqlalchemy import create_engine
import pandas as pd
from app.config import Config
import click
from pathlib import Path
from glob import glob
import logging
from logging import info
from pathlib import Path


def create_word_tables():
    engine = create_engine(Config.SQLALCHEMY_DATABASE_URI, echo=False)
    current_app = create_app()
    current_app.config.from_object(Config)
    current_app.app_context().push()
    db.init_app(current_app)
    db_filepath = current_app.config["SQLITE3_DB_PATH"]

    if Path(db_filepath).exists():
        # Warn the user about the consequences of running the script and ask
        # them
        if not click.confirm(
            "This script will delete the existing database "
            f"({db_filepath}) and create a fresh one. "
            "Are you sure you want to continue?",
            default=False,
        ):
            info("Database creation canceled. Exiting now.")
            sys.exit(0)

    db.drop_all()
    db.create_all()

    basedir = os.path.abspath(os.path.dirname(__file__))
    static_dir = "static/scivocab"
    words_df = pd.read_csv(
        f"{basedir}/../input_tables/words.csv",
    )

    info("Adding words to database.")
    for row in words_df.itertuples():
        word = Word(
            id=row.id,
            breadth_id=row.breadth_id,
            depth_id=row.depth_id,
            definition_id = row.definition_id,
            target = row.target,
            strand = Strand(id=str(row.strand_id)),
            audio_file = f"{row.id}_{row.target[0:3]}.wav"
        )

        db.session.merge(word)

        if not pd.isna(row.breadth_id):
            for img_type in ("tw", "fs", "fp", "fx"):
                breadth_task_image = BreadthTaskImage(
                    word_id=row.id,
                    filename=f"{row.breadth_id}_{img_type}.jpg",
                    image_type=BreadthTaskImageType(id=img_type),
                )
                db.session.merge(breadth_task_image)

        if not pd.isna(row.depth_id):
            for img_type in ("a", "b", "c", "e"):
                depth_task_image = DepthTaskImage(
                    word_id=row.id,
                    filename=f"{row.depth_id}_{img_type}.jpg",
                    image_type=DepthTaskImageType(id=img_type),
                )
                db.session.merge(depth_task_image)

    db.session.commit()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    create_word_tables()
